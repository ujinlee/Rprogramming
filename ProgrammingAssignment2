
## This is a code to cache the inverse of a matrix
## MakeCacheMatrix uses a function to store a matrix, compute the inverse and store it

makeCacheMatrix <- function(x=matrix()){
        inv <- NULL
        set <- function(y){
                x <<-y
                inv <<- NULL}
        get <- function()x
        setinverse <- function(inverse) inv <<- inverse
        getinverse <- function() inv
        list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)}

## Check inverse of the given matrix,
## If the inverse has been calculated (and the matrix is the same), 
## then the cachesolve should retrieve the inverse from the cache. 
## If the inverse has not been calculated, data gets the matrix stored with makeCacheMatrix 
## m calculates the inverse, and x$setmean(m) stores it in the object m in makeCacheMatrix.

cacheSolve <- function(x, ...){
        inv <- x$getinverse()
        if(!is.null(inv)){
                message("getting cached data")
                return(inv)}
        data <- x$get()
        inv<-solve(data, ...)
        x$setinverse(inv)
        inv }
